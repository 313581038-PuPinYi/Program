PL OurScheme project for the spring of 2021, Part 2 ("Project 2")

Due : 6/27(日) midnight (23:59)

// Some test input of Project 1 may again appear in Project 2
// e.g., if in Project 1 the input was : (1 2 3)
//       then in Project 2, this input may reappear(再現) as : 
//								1. '(1 2 3)  
//                              2. (quote (1 2 3))

------------------------------------------------------------------------------------------------
In Project 1, you have done the following : (寫完任務一應該有實作哪些東西----不重要跟任務二無關)

  ＊ You wrote a scanner or a 「scanner layer」 (consisting of several
     functions).  
	    
     This scanner is responsible for (1) using separators to get tokens  
     from the user's actual input, and (2) deciding what tokens they are ;
      
     In a sense, the scanner "transforms" the actual input stream of
     characters into a (conceptual) input stream of tokens.
	 你寫了一個掃描器或一個「掃描器層」（由幾個函數組成）。
	 該掃描器負責 (1) 使用分隔符從用戶的實際輸入中獲取標記， (2) 確定它們是什麼標記；
     從某種意義上說，掃描器將實際的字符輸入流“轉換”為（概念上的）標記輸入流。
	 
  ＊ You wrote a parser or a 「parser layer」(consisting of several
     functions).
     
     The parser "reads" the conceptual input stream of tokens by calling 
     the scanner, and decides whether the input stream of tokens
     satisfies the grammar of an S-expression.
  
     Once the parser makes sure that the tokens "read"
     satisfies the grammar of an S-expression, it constructs
     an internal, tree-like data structure for this S-expression.
	 你寫了一個解析器或“解析器層”（由幾個函數組成）。
	 解析器通過調用掃描器“讀取”概念性的輸入流，判斷輸入流是否滿足S-expression的語法。
	 一旦解析器確定“讀取”的標記滿足 S 表達式的語法，它就會為這個 S 表達式構造一個內部的樹狀數據結構。	
	 
  ＊ You wrote a "pretty-printer".  Given a pointer to an internal data 
     structure that corresponds to some S-expression, the pretty-printer 
     prints out this S-expression in some pre-determined format.
	 你寫了一個“漂亮的打印機”。 
	 給定一個指向對應於某個 S 表達式的內部數據結構的指針，漂亮打印機以某種預先確定的格式打印出這個 S 表達式。
	 
  ＊ You managed to print an error message signifying the location
     of the so-called "error character" whenever the system encounters  
     a syntax error in the user's input.
	 每當系統在用戶輸入中遇到語法錯誤時，您設法印出一條錯誤消息，指出所謂的“錯誤字符”的位置。
	
  ＊ You organized the working of your OurScheme interpreter in some way,
     so that the working of your system corresponds to the following 
     "code skeleton" :
	   您以某種方式組織了 OurScheme 解釋器的工作，因此您的系統的工作對應於以下“代碼框架”：
	 
     Print : 'Welcome to OurScheme!'
     
     repeat
     
       Print : '> '
       
       ReadSExp( s_exp ); 
       
       if no syntax error (no "unexpected token" or "unclosed string") 文法正確
         then PrintSExp( s_exp );
       else 
         PrintErrorMessage() ;
       
     until user has just entered LEFT_PAREN "exit" RIGHT_PAREN
           or
           EOF encountered
     
     if ( END-OF-FILE encountered ) // and NOT 「user entered '(exit)'」
       Print 'ERROR (no more input) : END-OF-FILE encountered' 

     Print '\n'
     Print : 'Thanks for using OurScheme!'
------------------------------------------------------------------------------------------------

For Project 2, you are to extend your system so that the following are
realized (by your system). (任務二要實作的內容)

  ＊ All "primitive expressions" (expressions that involve primitive 
     operations) can be evaluated.
	可以評估所有“原始表達式”（涉及原始操作的表達式）。
	
  ＊ 'define' is supported (but no definition (and use) of functions yet)
	 支持/實作 “定義”（但還沒有no definition and use functions ）
	  
  ＊ "Conditional processing" (via the use of 'if' and 'cond') is supported.
	 支持/實作 “條件處理”（通過使用“if”和“cond”）。
	  
  ＊ Sequencing (functional composition and the use of 'begin') is supported.
     支持/實作 排序（功能組合和“begin”的使用）。
	 
Your main program should now look something like the following.

  Print : 'Welcome to OurScheme!'
  
  repeat
  
    Print : '> '
    
    ReadSExp( inSExp ); 
    
    if no syntax error 文法正確
    
      then 
      
        EvalSExp( inSExp, resultSExp ) ;   評估合乎表達式?
        
        if evaluation error  不合乎表達式
          then PrintEvaluationError() ;
          
        else // no evaluation error 合乎表達式
          PrintSExp( resultSExp ); 印答案
          
      end-then // no syntax error
      
    else // syntax error 文法錯誤
      PrintSyntaxError() ;
    
  until user has just entered "(" "exit" ")"
        or
        EOF encountered
  
  if ( END-OF-FILE encountered ) // and NOT 「user entered '(exit)'」
    Print 'ERROR (no more input) : END-OF-FILE encountered' 

  Print '\n'
  Print : 'Thanks for using OurScheme!'



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
error的判斷(怎樣的寫法應該算什麼樣的error？)是以HowToWriteOurScheme.doc為準 (討厭!!)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Below are the primitives (and features) that your system should implement. 
以下是您的系統應實現的原語（和功能）

(括號內的數字指的是這個function可接受的argument的數目  !!!!! **************||**************!!!!!!
- i.e., the number ofarguments that this function can take)

1. Constructors 構造函數

  cons (2) ***
  list (>= 0) ***

2. Bypassing the default evaluation 繞過默認評估

  quote (1) *** 
  '     (1) ***

3. The binding of a symbol to an S-expression 符號與 S 表達式的綁定

  define (2) ***

  ; Once a symbol is defined (or "bound"), the user can enter 
  ; this symbol, and the system will return its binding.
  一旦符號被定義（或“綁定”），用戶就可以輸入某個符號，系統將返回某個符號進行綁定。  
  
  ; however, the user is not allowed to redefine symbols that happen
  ; to be system primitives such as 'cons' or 'car' or 'cdr', etc.
  但是，不允許用戶重新定義系統原語，例如“cons”或“car”或“cdr”等。*******
	
	
4. Part accessors 配件 可以訪問list的不同部分
 
  car (1) ***
  cdr (1) ***

5. Primitive predicates (all functions below can only take 1 argument) 原始謂詞（以下所有函數--只能接受 1 個參數***）

  atom? (1)
  pair? (1)
  list? (1)
  null? (1)
  integer? (1)
  real? (1)
  number? (1) // in OurSchem, real? = number?, but not in Scheme (there are complex-numbers)
  string? (1)
  boolean? (1)
  symbol? (1)

6. Basic arithmetic, logical and string operations 基本算術、邏輯和字符串運算

  + (>= 2) ***
  - (>= 2) ***
  * (>= 2) ***
  / (>= 2) ***
  
  ; in evaluating 'and' or 'or', it is possible that some "argument expr"
  ; does not get evaluated ; use Petite Scheme to see what this means
  ; e.g., (set! a 5) a (and (set! a 10) #f (set! a 100)) a (or #t (set! a 200)) a
  在評估'and' 或 'or'時，有可能某些“參數表達式”沒有得到評估； 使用 Petite Scheme 查看這意味著什麼，
  例如 (set! a 5) a     (and (set! a 10) #f       (set! a 100)) a     (or #t (set! a 200)) a
  
  not (1) ***
  and (>= 2) ***
  or  (>= 2) ***
  
  ; all functions below can take 2 or more arguments 
  
  下面所有 接受2個以上參數***
  >
  >=
  <
  <=
  =
  string-append
  string>?
  string<?
  string=?
-----------------------------------------------------------------------------------------
7. Eqivalence tester 等效性測試

  eqv?    (2) *** ; 只接受2個參數 相等atom或是被比較的對象指向同一個記憶體，才為#t
  equal?  (2) *** ; 只接受2個參數，普通compare，只看內容是否相同

8. Sequencing and functional composition 測序和功能組合

  begin   (>= 1) ***
  
  ; the user may also enter, e.g., >>(car (cdr '(1 2 3 4)))<<

9. Conditionals 條件判斷

  ; in evaluating 'if' or 'cond', it is possible that some "sub-expr"
  ; does not get evaluated (this is the meaning of conditional expressions) ;
  ; use Petite Scheme to check ;
  
  if     (2 or 3) *** 
  cond   (>= 1) ***

10. clean-environment 此指令將user的definitions清空，一切重新開始
         
  clean-environment   (0) ***
  

Example :  // assuming that we run the system using interactive I/O


// ========= I/O starts below and does not include this line ===========================================
Welcome to OurScheme!

> ; 1. A list (or rather, a dotted pair) is CONSTRUCTED.
       構造了一個列表（或者更確切地說，a dotted pair）。

(cons 3 4)     ; an operation on two objects
( 3
  .
  4
)

> (cons 3
        nil
  )            ; '(3 . nil)' = '(3)'
( 3
)

> (cons 3
        ()
  )            ; same thing
( 3
)

> (CONS 3 4)      ; Scheme distinquishs between upper and lower cases
ERROR (unbound symbol) : CONS

> (cons hello 4)
ERROR (unbound symbol) : hello

> hello
ERROR (unbound symbol) : hello

> (CONS hello there)
ERROR (unbound symbol) : CONS

> (cons 1 2 3)
ERROR (incorrect number of arguments) : cons

> ; 2. To "by pass" the default interpretation of an S-exp

(3 4 5)
ERROR (attempt to apply non-function) : 3

> '(3 4 5)
( 3
  4
  5
)

> (quote (3 (4 5)))
( 3
  ( 4
    5
  )
)

> (cons 3 
        (4321 5))
ERROR (attempt to apply non-function) : 4321

> (cons 3 '(4321 5))
( 3
  4321
  5
)

> (list 3 (4 5))
ERROR (attempt to apply non-function) : 4

> (list 3 '(4 5))
( 3
  ( 4
    5
  )
)

> (list 3 
        '(4 5) 
        6 
        '(7 8))
( 3
  ( 4
    5
  )
  6
  ( 7
    8
  )
)

> ; 2. To give a (symbolic) name to an object /////////////////////////////////////////////////
       給一個對象一個（象徵性的）名字
	   
; Meaning of DEFINE revisited ("令")
  重新“定義”的含義

; Basically, DEFINE sets up a (temporary) binding between a symbol 
; and an S-expression

; DEFINE sets up the binding between a name and an internal data structure

abc
ERROR (unbound symbol) : abc

> (define a 5)   ; "令a為5"; 讓我們把"那個東西"又稱為'a'
a defined

> a              ; Is 'a' a name for something?
5

> (define x '((3 4) 5))   ; 讓我們把"那個東西"又稱為'x'
x defined

> x              ; Is 'x' a name for something?
( ( 3
    4
  )
  5
)

> ; Combining (1), (2) and (3)
(define hello '(1 2 . 3))
hello defined

> hello
( 1
  2
  .
  3
)

> (cons hello 
        4
  )       
( ( 1
    2
    .
    3
  )
  .
  4
)

> (cons hello 
        '(4)
  )       
( ( 1
    2
    .
    3
  )
  4
)

> (define hello "CYCU ICE (1 2 3)")
hello defined

> (cons hello 
        '(400 (5000 600) 70)
  )       
( "CYCU ICE (1 2 3)"
  400
  ( 5000
    600
  )
  70
)

> (define there "Number One!")
there defined

> (cons hello there)
( "CYCU ICE (1 2 3)"
  .
  "Number One!"
)

> (define hello '(1 2 . (3)))
hello defined

> (list 3 4)
( 3
  4
)

> ( list hello
         4
  ) 
( ( 1
    2
    3
  )
  4
)

> ; 3. Whenever a function is called, its parameters are evaluated first.  
;    However, if the first symbol of a to-be-evaluated list
;    is not bound to a function in the first place, the evaluation process 
;    stops, and an appropriate error message is issued.
     每當一個函數被調用時，它的參數首先被求值。 
     但是，如果待評估列表的第一個符號首先未綁定到函數，則評估過程停止，並發出適當的錯誤消息。


> (f 3 b)
ERROR (unbound symbol) : f

> (cons 3 b)
ERROR (unbound symbol) : b

> (cons 3 a) ---------------------- a 在347行被定義為5
( 3
  .
  5
)

> (a 3 a) --------------------------------------- 說得是第一個 a ， a 在347行被定義為5
ERROR (attempt to apply non-function) : 

> (define a '(3 4))
a defined

> (cons 5 a)
( 5
  3
  4
)

> a
( 3
  4
)

> ; 4. Different parts of a list (or a dotted pair) can be individually accessed
       可以單獨訪問list（或dotted pair）的不同部分

(car '(3 4))    ; the "left part" of a dotted pair
3

> (car '((3 4) 5)  )
( 3
  4
)

> (car '((3 4) 5 . 6)  )
( 3
  4
)

> (car '((3 4) . 5)  )
( 3
  4
)

> (car a)-------------a在459行被綁定為'(3 4)
3

> (car WarAndPeace!)
ERROR (unbound symbol) : WarAndPeace!

> (cdr '((3 4) 5)  )  ; the "right part" of a dotted pair
( 5
)

> (cdr '((3 4) "Happy New Year!" . 6)  )
( "Happy New Year!"
  .
  6
)

> (cdr '((3 4) . "Merry Christmas!")  )
"Merry Christmas!"

> (cdr a)-------------a在459行被綁定為'(3 4)
( 4
)

> 
; --可以通過混合使用CAR and CDR 訪問list的不同部分

(car (cdr '((3 4) 5)   ))
5

> (car (cdr '((3 4) 5 . 6)  ))
5

> (car (cdr '((3 4) 5  6  7)   ))
5

> (cdr (cdr '((3 4) 5  6  7)   )
  )     
( 6
  7
)

> (car 3)
ERROR (car with incorrect argument type) : 3 *************

> (car 3 4)
ERROR (incorrect number of arguments) : car **************

> (car 3 . 5)
ERROR (non-list) : ( car *********************************
  3
  .
  5
)

> ; 5. Primitive predicates (A predicate is a function that returns //////////////////
;      "true" or "false"; By convention, the name of a predicate
;      should have a suffix '?')
       原始謂詞（謂詞是返回“真”或“假”的函數；按照慣例，謂詞的名稱應該有後綴“？”）

> (atom? 3)
#t

> (atom? '(1 . 2))
nil

> (pair? 3)      ; Other Lisps do not have PAIR; they have ATOM
nil

> (pair? '(3 4))
#t
                 
> (pair? '(3 . 4))
#t

> (pair? "Hello, there!")
nil

> (list? 3)
nil

> (list? '(1 2 3))
#t

> (list? '(1 2 . 3))
nil

> (null? ())     ; is it the empty list?
#t

> (null? #f)
#t

> (null? '(3 . 4))
nil

> (integer? 3)
#t

> (integer? +3)
#t

> (integer? 3.4)
nil

> (integer? -.4)
nil

> (real? 3)
#t

> (real? 3.4)
#t

> (real? .5)
#t

> (number? 3) ; in OurScheme, is-real IFF is-number
#t

> (number? 3.4) ; but in other Schemes, there may be complex numbers
#t

> (string? "Hi") ; therefore, in other Scheme, a number may not be real
#t

> (string? +3.4)
nil

> (boolean? #t)
#t

> (boolean? ())
#t

> (boolean? #f)
#t

> (boolean? '(3 . 4))
nil

> (symbol? 'abc)
#t

> (symbol? 3)
nil

> (number? America)
ERROR (unbound symbol) : America

> (define America '(U. S. A.))
America defined

> (symbol? America)
nil

> (pair? America)
#t

> (pair? AmericanAAA)
ERROR (unbound symbol) : AmericanAAA

> (boolean? America)
nil

> (pair? Europe 4)
ERROR (incorrect number of arguments) : pair?

> (pair? America Europe)
ERROR (incorrect number of arguments) : pair?

> (define Europe 'hi)
Europe defined

> (pair? America Europe)
ERROR (incorrect number of arguments) : pair?

------------------------------------------------------------------

> (define a . 5)
ERROR (non-list) : ( define
  a
  .
  5
)

> (define a) ; problem with the number of parameters
ERROR (DEFINE format) : ( define
  a
)

> (define a 10 20)
ERROR (DEFINE format) : ( define
  a
  10
  20
)

> (define cons 5) ; attempt to redefine a system primitive
ERROR (DEFINE format) : ( define
  cons
  5
)

> 
; 6. Basic arithmetic, logical and string operations
	 基本算術、邏輯和字符串運算
	 
> (+ 3 7)
10

> (+ 3 7 10 25)
45

> (- 3 7)
-4

> (- 3 7 10 25)
-39

> (/ 5 2)  ; integer division
2

> (/ 5 2.0) ; float division ; a float is always printed in 3 digits
2.500

> (/ 2 3.0) ; Use printf( "%  .3f", ...) in C or String.format( "%.3f", ...) in Java
0.667

> (- 3.5 5) 
-1.500

> (* 3 4)
12

> (* 3 "Hi")
ERROR (* with incorrect argument type) : "Hi"

> (* 3)
ERROR (incorrect number of arguments) : *

> (* 3 4 5)
60

> (* 1 2 3 4 5)
120

> (- 1 2 3 4 5)
-13
--------------
> (define a 5)
a defined

> (/ 15 a)
3

> (/ 7 a)
1
--------------
> (/ 15.0 3)
5.000

> (/ 30 5 0) ; always test for "division by 0" before performing division 被除數不能為零***********
ERROR (division by zero) : /

> (+ 15.125 4)
19.125

> (not #t)
nil

> (> 3 2)
#t

> (> 3.125 2)
#t

> (>= 3.25 2)
#t

> (< 3.125 2)
nil

> (<= 3.125 2)
nil

> (= 2 2)
#t

> (= 2 a)
nil

> (> a a)
nil

> (+ a a a)
15
------------------------------------ 以下字串相加/串接
> (string-append "Hello," " there!") 
"Hello, there!"

> (string-append "Hello," " there!" " Wait!")
"Hello, there! Wait!"
------------------------------------混和 是否是字串 且"az" > "aw" ?
> (string>? "az" "aw")
#t

> (string<? "az" "aw")
nil

> (string=? "az" "aw")
nil

> (string=? "az" (string-append "a" "z")) ********
#t

> (string>? "az" "aw" "ax")
nil

> (string<? "az" "aw" "ax")
nil

> (string=? "az" "aw" "ax")
nil

> (string>? "az" "aw" "atuv")
#t

> (string>? 15 "hi")
ERROR (string>? with incorrect argument type) : 15

> (+ 15 "hi")
ERROR (+ with incorrect argument type) : "hi"

> (string>? "hi" "there" a)
ERROR (string>? with incorrect argument type) : 5

> (string>? "hi" "there" about)
ERROR (unbound symbol) : about

> (string>? "hi" "there" about a)
ERROR (unbound symbol) : about
---------------------------混和 是否是字串 END


> ; 7. eqv? and equal?

; eqv? returns "true" only when the two being compared
; objects are atoms (except in the case of strings)
; or when the two being compared objects "occupy the
; same memory space".
僅當兩個被比較對像是原子（字符串的情況除外）
或兩個被比較對象“佔用相同的內存空間”時才返回“真”
; equal?, on the other hand, is the usual notion of 
; equality comparison

(eqv? 3 3)
#t

> a
( 3
  4
)

> (eqv? a a)
#t

> (eqv? a '(3 4))
nil

> (equal? a '(3 4))
#t

> (define b a)
b defined

> (eqv? a b)
#t

> (define c '(3 4))
c defined

> (eqv? a c)
nil

> (equal? a c)
#t

> (eqv? '(3 4) '(3 4))
nil

> (eqv? "Hi" "Hi")
nil

> (equal? a a)
#t

> (equal? '(3 4) '(3 4))
#t

> (equal? "Hi" "Hi")
#t

> ; some functional compositions
(not (pair? 3))
#t

> (define a 5)
a defined

> ( and        ; 'and' either returns the evaluated result of
    (pair? 3)  ; the first one that is evaluated to nil
    a          ; or the evaluated result of the last one
  )                          
nil

> ( and #t a )
5

> ( or         ; 'or' either returns the evaluated result of
    a          ; the first one that is not evaluated to nil
    (null? ()) ; or the evaluated result of the last one
  )
5

> 9. Conditionals 條件判斷     


(if (> 3 2) 'good 'bad)
good

> (define a 5)
a defined

> (if a 'good 'bad) ; note : 'if' can take just two arguments
good

> (if #t 30)
30

> (if #f 20)
ERROR (no return value) : ( if
  nil
  20
)

> (if (not a) 'good 'bad)
bad

> (define a nil)
a defined

> (if a '(1 2) '(3 4))
( 3
  4
)

> (if (not a) '((1 (2) 1) 1) '((3) (4 3)))
( ( 1
    ( 2
    )
    1
  )
  1
)

> (define b 4)
b defined

>  ; 'else' :
   ; 僅當它作為 'cond' 的最後一個條件的第一個元素出現時才具有特殊含義； 在所有其他情況下，“else”被視為普通符號
  
(cond ((> 3 b) 'bad)
      ((> b 3) 'good)
      (else "What happened?") ; this 'else' has a special meaning ;
)                             ; it means "in all other cases" here
good

> (cond ((> 3 b) 'bad)
        (else 'good)          ; this 'else' is treated as a normal symbol 普通字
        (else "What happened"); this 'else' is treated as a keyword
  )
ERROR (unbound symbol) : else

> (define else #f)            ; this 'else' is treated as a normal symbol
else defined

> (cond ((> 3 b) 'bad)
        (else 'good)          ; the normal symbol 'else' is bound(綁定) to nil
        (else "What happened"); this 'else' means "in all other cases"
  )
"What happened"

> (cond ((> 3 b) 'bad)
        ((> b 5) 'bad)
        (else "What happened?")
  )
"What happened?"

> (cond ((> 3 4) 'bad)
        ((> 4 5) 'bad)
  )
ERROR (no return value) : ( cond
  ( ( >
      3
      4
    )
    ( quote
      bad
    )
  )
  ( ( >
      4
      5
    )
    ( quote
      bad
    )
  )
)

> (cond ((> 3 4) 'bad)
        ((> 4 3) 'good)
  )
good

> (cond ((> y 4) 'bad)
        ((> 4 3) 'good)
  )
ERROR (unbound symbol) : y

> (cond)
ERROR (COND format) : ( cond
)

> (cond #t 3)
ERROR (COND format) : ( cond
  #t
  3
)

> (cond (#t 3))
3

> (cond (#f 3))
ERROR (no return value) : ( cond
  ( nil
    3
  )
)

> (cond (#t (3 4)))
ERROR (attempt to apply non-function) : 3

> (cond (#f (3 4)) 5)
ERROR (COND format) : ( cond
  ( nil
    ( 3
      4
    )
  )
  5
)

> (cond (#f (3 4)) (5 6))
6

> (cond (#f (3 4)) ("Hi" (cons 5) . 6))
ERROR (COND format) : ( cond
  ( nil
    ( 3
      4
    )
  )
  ( "Hi"
    ( cons
      5
    )
    .
    6
  )
)

> (cond (#f (3 4)) ("Hi" (cons 5) 6))
ERROR (incorrect number of arguments) : cons

> (cond (#f (3 4)) ("Hi" (cons 5 6) 7))
7

> ;
  ; 9. Sequencing and functional composition   排序和功能組合/????????????
  ;
  ;    Can be more complex than what is given here

(define d 20)
d defined

> d
20

> (if #t 3 5)
3

> (begin
   3  4  5)
5

> (begin
   3 4 d)
20

> (begin
   (+ 3 5)
   (- 4 5)
   (* d d)
  )
400

> (define a 20)
a defined

> (define b 40)
b defined

> (+ d
     ( if (> a b)
          (+ a (* a b))
          (- b (+ a a))
     )
  )
20

> (+ d
     ( if (> a b)
          (+ a (* a b))
          ( begin
            (- b (+ a a))
            70
          )
     )
  )
90

> (if #t (begin 3 4 5) (begin 6 7))
5

> (if #t (3 4 5) (6 7))
ERROR (attempt to apply non-function) : 3

> (if #f (3 4 5) (6 7))
ERROR (attempt to apply non-function) : 6

> (cond ((> 5 3) 'good 'better 'best) (#t 'OK?)   )
best

> ;
  ; 10. clean-environment cleans up the (user-defined) environment 
  ;     此指令將user的definitions清空，一切重新開始

(clean-environment)
environment-cleaned

> a
ERROR (unbound symbol) : a

> (define a 5)
a defied

> a
5

> (clean-environment)
environment cleaned

> a
ERROR (unbound symbol) : a

> ;
  ; 11. the binding of a symbol can be a function, which is an atom too
  ;
  
cons ; the binding of the symbol 'cons' is a function with original name being 'cons'
#<procedure cons>
     ; 符號 'cons' 的綁定是一個原始名稱為 'cons' 的函數
     ; #<procedure cons>

> (atom? cons)
#t

> (define myCons cons) ; let the binding of 'myCons' be the binding of 'cons'
myCons defined

> myCons ; the binding of 'myCons' is a function with original name being 'cons'
#<procedure cons>

; 不能綁定系統 原有特殊功能的字串 cons，car，cdr，define......
; #<procedure cons>

> (define a (myCons car cdr))
a defined

> a
( #<procedure car>
  .
  #<procedure cdr>
)
; 不能綁定系統 原有特殊功能的字串 cons，car，cdr，define......
; ( #<procedure car>
;  .
;  #<procedure cdr>
; )


> (car a)
#<procedure car>

> (cdr a)
#<procedure cdr>

> (define a (list car cdr))
a defined

> (car a)
#<procedure car>

> (cdr a)
( #<procedure cdr>
)

> ((car a) (cons car cdr)) ; just think of a function as a "value" just like 3
#<procedure car>

> (  ((car a) (cons car cdr)) ; test data like this will not appear
     '((10 20) (30 40) . 50)  ; until Prob. 6, 7, 13, 14, 15 and 16
  )
( 10
  20
)

> 
(   
    exit   
           )      

Thanks for using OurScheme!
// ========= I/O ends above and does not include this line ========




// ============================================================================================================




Project 2可能會出現的error - 總整理 【重要】

===========================================================================================
一、Project 1的四個可能會出現的error，在Project 2 依舊可能會出現：

  ERROR (unexpected token) : atom or '(' expected when token at Line X Column Y is >>...<<
  ERROR (unexpected token) : ')' expected when token at Line X Column Y is >>...<<
  ERROR (no closing quote) : END-OF-LINE encountered at Line X Column Y
  ERROR (no more input) : END-OF-FILE encountered
===========================================================================================

二、Project 2增加了以下的這些error：


> (cons 3 . 5)
ERROR (non-list) : ( cons
  3
  .
  5
)

> (cons 3 (cons 3 . 5))
ERROR (non-list) : ( cons
  3
  .
  5
)

> (cons 3)
ERROR (incorrect number of arguments) : cons

> (exit 0)
ERROR (incorrect number of arguments) : exit

> (car 3)
ERROR (car with incorrect argument type) : 3

> (3 5)
ERROR (attempt to apply non-function) : 3

> (if #f 3)
ERROR (no return value) : ( if
  nil
  3
)

> (cond (#f 3) (#f 4))
ERROR (no return value) : ( cond
  ( nil
    3
  )
  ( nil
    4
  )
)

> noSuchThing
ERROR (unbound symbol) : noSuchThing

> (cons noSuchThing noOtherThingEither)
ERROR (unbound symbol) : noSuchThing

> (/ 30 5 0)
ERROR (division by zero) : /

> (define a) ; problem with the number of parameters
ERROR (DEFINE format) : ( define
  a
)

> (define a 10 20)
ERROR (DEFINE format) : ( define
  a
  10
  20
)

> (define cons 5) ; attempt to redefine a system primitive
ERROR (DEFINE format) : ( define
  cons
  5
)

> ;
  ; >>ERROR (COND format)<< will only be tested in Problems 13, 14
  ; and 16
  ;

(clean-environment)
environment cleaned

> (cond ((> y 4) 'bad)
        ((> 4 3) 'good)
  )
ERROR (unbound symbol) : y

> (cond)
ERROR (COND format) : ( cond
)

> (cond #t 3)
ERROR (COND format) : ( cond
  #t
  3
)

> (cond (#f 3))
ERROR (no return value) : ( cond
  ( nil
    3
  )
)

> (cond (#t (3 4)))
ERROR (attempt to apply non-function) : 3

> (cond (#f (3 4)) 5)
ERROR (COND format) : ( cond
  ( nil
    ( 3
      4
    )
  )
  5
)

> (cond (#f (3 4)) ("Hi" (cons 5) . 6))
ERROR (COND format) : ( cond
  ( nil
    ( 3
      4
    )
  )
  ( "Hi"
    ( cons
      5
    )
    .
    6
  )
)

> (cond (#f (3 4)) ("Hi" (cons 5) 6))
ERROR (incorrect number of arguments) : cons
===========================================================================================